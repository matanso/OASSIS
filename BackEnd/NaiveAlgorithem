package Oasis;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.openrdf.query.BindingSet;
import org.openrdf.query.QueryEvaluationException;
import org.openrdf.query.TupleQueryResult;

public class NaiveAlgortihm extends TraversalModule{
	
	class Assignment
	{
		int significanceBit; //0 for undecided, 1 for insignificant, 2 for significant
		Map<Integer, Integer> supportDic; //a dictionary of users as keys, and each user has it's support for the assignment.
		
		Assignment(){
			this.significanceBit = 0;
			this.supportDic = new HashMap<Integer, Integer>();
		}
	}
	
	//+++++++++++++Fields Here+++++++++
	Map<BindingSet, Assignment> answers;
	List<BindingSet> keys; //a list to hold all the keys of the map, to use for random access. (because we have to make this list everytime next is called, so I made it a field to save time)
	
	public NaiveAlgortihm(TupleQueryResult validAssignments) {
		super(validAssignments);
		this.answers = new HashMap<BindingSet, Assignment>();
		try {
			while (validAssignments.hasNext()){
				BindingSet tempBindingSet = validAssignments.next();
				answers.put(tempBindingSet, null);//Remember that at the beginning all BindingSet's Assignment class are null.
				keys.add(tempBindingSet);
			}
		} catch (QueryEvaluationException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void extendAssignments() {
		
	}

	@Override
	public BindingSet next(int userID) {
		int isUsed = 1;
		int counter = 0;
		Random random = new Random();
		BindingSet randomKey = null;
		Assignment tempAssignment;
		while(counter < answers.size()){ //iterates over random assignments until an undiscovered one is found.
			tempAssignment = answers.get(randomKey);
			randomKey = keys.get(random.nextInt(keys.size()));
			isUsed = tempAssignment.significanceBit;
			if ((isUsed == 0) && (tempAssignment.supportDic.get(userID) == null)){ //if assignment's undecided and the user didn't answer it
				break;
			}
		}
		return randomKey;
	}

	
	public void update(BindingSet assignment, int userID, int support){
		//assumes assignment hasnt been answered by user yet.
		Assignment tempAssignment = answers.get(assignment);
		tempAssignment.supportDic.put(userID, support);	//maybe here we need to put tempAssignment back into answers, but doesnt seem like it.
	}
	
	@Override
	public boolean aggregator() {
		return false;
	}

	
	
}
